# redeploy trigger: cosmetic bump
import os
import logging
import subprocess
import tempfile
import re
import shutil
import asyncio
import sys
import mimetypes
import magic  # New import for detecting MIME types
import telegram
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import json
import glob
from pathlib import Path
import traceback
from datetime import datetime
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞)
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx
logger = logging.getLogger(__name__)

# --- Define script path relative to bot.py ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
PIPELINE_SCRIPT_PATH = os.path.join(SCRIPT_DIR, 'run_analysis_pipeline.py')

# Initialize MIME types
mimetypes.init()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞), –∏ —è –ø—Ä–æ–≤–µ–¥—É –µ–≥–æ –∞–Ω–∞–ª–∏–∑.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await update.message.reply_text(
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç) –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª).\n"
        "2. –Ø –∑–∞–ø—É—â—É –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ (GPT-4, Gemini Coordinates, Heatmap, Report).\n"
        "3. –í –æ—Ç–≤–µ—Ç —è –ø—Ä–∏—à–ª—é PDF-–æ—Ç—á–µ—Ç –∏ —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç), –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    message = update.message
    chat_id = update.effective_chat.id
    file_to_get = None
    file_unique_id = None
    file_extension = '.png' # Default extension

    photo = message.photo
    document = message.document

    if photo:
        # Process photo
        await message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç ‚è≥")
        try:
            file_to_get = await message.photo[-1].get_file()
            file_unique_id = file_to_get.file_unique_id
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif document and document.mime_type and document.mime_type.startswith('image/'):
        # Process document image
        await message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç) –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç ‚è≥")
        try:
            file_to_get = await document.get_file()
            file_unique_id = file_to_get.file_unique_id
            file_extension = mimetypes.guess_extension(document.mime_type) or '.png'
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    else:
        # Neither photo nor image document
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with tempfile.TemporaryDirectory() as temp_dir:
        # Use unique ID and determined extension for filename
        image_filename = f"input_image_{file_unique_id}{file_extension}"
        image_path = os.path.join(temp_dir, image_filename)
        try:
            await file_to_get.download_to_drive(image_path)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {image_path}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # Helper function to detect MIME type
        def get_mime_type(file_path):
            """Determine the correct MIME type for a file."""
            try:
                # Use python-magic to detect the MIME type
                mime = magic.Magic(mime=True)
                mime_type = mime.from_file(file_path)
                logging.info(f"Detected MIME type for {file_path}: {mime_type}")
                return mime_type
            except Exception as e:
                logging.warning(f"Failed to detect MIME type using magic: {e}")
                # Fallback to extension-based detection
                ext = os.path.splitext(file_path)[1].lower()
                if ext == '.pdf':
                    return 'application/pdf'
                elif ext in ('.png', '.jpg', '.jpeg'):
                    return 'image/png' if ext == '.png' else 'image/jpeg'
                elif ext == '.json':
                    return 'application/json'
                elif ext == '.tex':
                    return 'application/x-tex'
                else:
                    # Additional fallback to mimetypes module
                    guess = mimetypes.guess_type(file_path)[0]
                    if guess:
                        logging.info(f"Mimetype module guessed: {guess} for {file_path}")
                        return guess
                    logging.warning(f"Could not determine MIME type for {file_path}, using default")
                    return 'application/octet-stream'

        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        async def send_formatted_interpretation(chat_id, interpretation_data):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
            try:
                if not interpretation_data or "strategicInterpretation" not in interpretation_data:
                    logger.warning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
                    )
                    return False

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="*üìä –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø*\n\n–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
                    parse_mode="Markdown"
                )

                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                interpretation = interpretation_data["strategicInterpretation"]
                sections = {
                    "cognitiveEcosystem": "üåê *–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞*",
                    "businessUserTension": "‚öñÔ∏è *–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –±–∏–∑–Ω–µ—Å-—Ü–µ–ª—è–º–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*",
                    "attentionArchitecture": "üèóÔ∏è *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–Ω–∏–º–∞–Ω–∏—è*",
                    "perceptualCrossroads": "üîÑ *–ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏*",
                    "hiddenPatterns": "üß© *–°–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã*"
                }

                for key, title in sections.items():
                    if key in interpretation and interpretation[key]:
                        text = f"{title}\n\n{interpretation[key]}"
                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        MAX_LEN = 4000
                        if len(text) <= MAX_LEN:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=text,
                                parse_mode="Markdown"
                            )
                        else:
                            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
                            parts = [text[i:i+MAX_LEN-len(title)-10] for i in range(0, len(text)-len(title)-10, MAX_LEN-len(title)-10)]
                            for i, part in enumerate(parts):
                                if i == 0:
                                    message = part
                                else:
                                    message = f"{title} (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n{part}"
                                await context.bot.send_message(
                                    chat_id=chat_id,
                                    text=message,
                                    parse_mode="Markdown"
                                )
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
                traceback.print_exc()
                return False

        async def send_formatted_recommendations(chat_id, recommendations_data):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
            try:
                if not recommendations_data or "strategicRecommendations" not in recommendations_data:
                    logger.warning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
                    )
                    return False

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="*üí° –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò*\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
                    parse_mode="Markdown"
                )

                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                recommendations = recommendations_data["strategicRecommendations"]
                for i, rec in enumerate(recommendations, 1):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    text = f"*{i}. {rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}*\n\n"
                    
                    if "problemStatement" in rec:
                        text += f"*–ü—Ä–æ–±–ª–µ–º–∞:*\n{rec['problemStatement']}\n\n"
                    
                    if "solutionDescription" in rec:
                        text += f"*–†–µ—à–µ–Ω–∏–µ:*\n{rec['solutionDescription']}\n\n"
                    
                    if "expectedImpact" in rec:
                        text += f"*–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:*\n{rec['expectedImpact']}\n\n"
                    
                    if "businessConstraints" in rec:
                        text += f"*–ë–∏–∑–Ω–µ—Å-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n{rec['businessConstraints']}\n\n"
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    additional_text = ""
                    if "crossDomainExample" in rec:
                        additional_text += f"*–ü—Ä–∏–º–µ—Ä –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π:*\n{rec['crossDomainExample']}\n\n"
                    
                    if "testingApproach" in rec:
                        additional_text += f"*–ü–æ–¥—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:*\n{rec['testingApproach']}\n\n"
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    MAX_LEN = 4000
                    if len(text) <= MAX_LEN:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=text,
                            parse_mode="Markdown"
                        )
                    else:
                        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
                        parts = [text[i:i+MAX_LEN] for i in range(0, len(text), MAX_LEN)]
                        for j, part in enumerate(parts):
                            part_text = part
                            if j == 0:
                                part_text = f"*{i}. {rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}*\n\n" + part[len(f"*{i}. {rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}*\n\n"):]
                            else:
                                part_text = f"*{i}. {rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}* (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {j+1})\n\n" + part
                            
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=part_text,
                                parse_mode="Markdown"
                            )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if additional_text and len(additional_text) > 0:
                        if len(additional_text) <= MAX_LEN:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {i}:*\n\n{additional_text}",
                                parse_mode="Markdown"
                            )
                        else:
                            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                            add_parts = [additional_text[i:i+MAX_LEN] for i in range(0, len(additional_text), MAX_LEN)]
                            for j, add_part in enumerate(add_parts):
                                await context.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {i} (—á–∞—Å—Ç—å {j+1}):*\n\n{add_part}",
                                    parse_mode="Markdown"
                                )
                
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
                traceback.print_exc()
                return False

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞
        try:
            # Check if pipeline script exists
            if not os.path.exists(PIPELINE_SCRIPT_PATH):
                logger.error(f"–°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PIPELINE_SCRIPT_PATH}")
                await message.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                return

            logger.info(f"–ó–∞–ø—É—Å–∫ {PIPELINE_SCRIPT_PATH} –¥–ª—è {image_path}")
            process = await asyncio.create_subprocess_exec(
                sys.executable, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ python, —á—Ç–æ –∏ –¥–ª—è –±–æ—Ç–∞
                PIPELINE_SCRIPT_PATH, # Use the absolute path
                image_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                # Set working directory to the script's directory? Maybe not needed if paths inside pipeline are ok.
                # cwd=SCRIPT_DIR
            )
            stdout, stderr = await process.communicate()
            stdout_str = stdout.decode('utf-8', errors='ignore')
            stderr_str = stderr.decode('utf-8', errors='ignore')

            logger.info(f"{PIPELINE_SCRIPT_PATH} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
            # Treat pipelines that generated a LaTeX or PDF report as success, even if return code is non-zero
            # Override return code if summary indicates success
            if "‚úÖ PDF –û—Ç—á–µ—Ç:" in stdout_str or "‚úÖ LaTeX –û—Ç—á–µ—Ç" in stdout_str:
                return_code = 0
            else:
                return_code = process.returncode
            if return_code != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {PIPELINE_SCRIPT_PATH}:\nstdout:\n{stdout_str}\nstderr:\n{stderr_str}")
                error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞."
                # Send stderr as plain text
                if stderr_str:
                    error_message += f"\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (raw):\n```\n...{stderr_str[-700:]}\n```"
                
                try:
                    await message.reply_text(error_message) # Send plain text error
                except Exception as send_err:
                     logger.error(f"Failed to send plain text error message: {send_err}")
                # Continue to send attachments even if pipeline returned an error
                # (do not return here)

            logger.info(f"stdout {PIPELINE_SCRIPT_PATH}:\n{stdout_str}") # Log received stdout
            if stderr_str: # –õ–æ–≥–∏—Ä—É–µ–º stderr –¥–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                logger.warning(f"stderr {PIPELINE_SCRIPT_PATH} (–ø—Ä–∏ –∫–æ–¥–µ 0):\n{stderr_str}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–∑ stdout
            logger.info("Parsing pipeline stdout for result paths...")
            pdf_path_match = re.search(r"‚úÖ PDF –û—Ç—á–µ—Ç: (.*\.pdf)", stdout_str)
            heatmap_path_match = re.search(r"‚úÖ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: (.*\.png)", stdout_str)
            interp_match = re.search(r"‚úÖ –§–∞–π–ª –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: (.*\.json)", stdout_str)
            rec_match = re.search(r"‚úÖ –§–∞–π–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: (.*\.json)", stdout_str)
            tex_match = re.search(r"‚úÖ LaTeX –û—Ç—á–µ—Ç.*: (.*\.tex)", stdout_str)

            pdf_path = pdf_path_match.group(1).strip() if pdf_path_match else None
            heatmap_path = heatmap_path_match.group(1).strip() if heatmap_path_match else None
            interp_path = interp_match.group(1).strip() if interp_match else None
            rec_path = rec_match.group(1).strip() if rec_match else None
            tex_path = tex_match.group(1).strip() if tex_match else None
            output_dir_match = re.search(r"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: (?:\./)?(analysis_outputs/run_\d{8}_\d{6})", stdout_str)
            output_dir = output_dir_match.group(1).strip() if output_dir_match else None # Group 1 is the analysis_outputs/... part

            logger.info(f"  Parsed PDF path: {pdf_path}")
            logger.info(f"  Parsed Heatmap path: {heatmap_path}")
            logger.info(f"  Parsed Interpretation path: {interp_path}")
            logger.info(f"  Parsed Recommendations path: {rec_path}")
            logger.info(f"  Parsed Fallback TeX path: {tex_path}")
            logger.info(f"  Parsed Output dir for cleanup: {output_dir}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await message.reply_text("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")

            results_sent = False
            # --- Sending PDF --- 
            if pdf_path:
                logger.info(f"Checking existence of PDF: {pdf_path}")
                if os.path.exists(pdf_path):
                    try:
                        logger.info(f"Attempting to send PDF: {pdf_path}")
                        # Get MIME type for PDF
                        mime_type = get_mime_type(pdf_path)
                        logger.info(f"Detected MIME type for PDF: {mime_type}")
                        
                        with open(pdf_path, 'rb') as pdf_file:
                            pdf_bytes = pdf_file.read()  # Read file into memory
                            await context.bot.send_document(
                                chat_id=chat_id, 
                                document=InputFile(pdf_bytes, filename=os.path.basename(pdf_path)),
                                caption="–ê–Ω–∞–ª–∏–∑ UI (PDF)"
                            )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω PDF: {pdf_path}")
                        results_sent = True
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF {pdf_path}: {e}")
                        try:
                            # Try simplified approach
                            with open(pdf_path, 'rb') as pdf_file:
                                await context.bot.send_document(
                                    chat_id=chat_id,
                                    document=pdf_file,
                                    filename=os.path.basename(pdf_path),
                                    caption="–ê–Ω–∞–ª–∏–∑ UI (PDF) - —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥"
                                )
                            logger.info(f"PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {pdf_path}")
                            results_sent = True
                        except Exception as e2:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {e2}")
                            try:
                                await message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç.") 
                            except Exception as reply_e:
                                logger.error(f"Failed to send error reply for PDF: {reply_e}")
                else:
                    logger.warning(f"PDF file path found in stdout, but file does not exist at: {pdf_path}")
            else:
                logger.info("No PDF path found in stdout.")

            # --- Sending Heatmap --- 
            if heatmap_path:
                logger.info(f"Checking existence of Heatmap: {heatmap_path}")
                heatmap_size_mb = os.path.getsize(heatmap_path) / (1024 * 1024) if os.path.exists(heatmap_path) else 0
                logger.info(f"Heatmap file size: {heatmap_size_mb:.2f} MB")
                if os.path.exists(heatmap_path):
                    try:
                        logger.info(f"Attempting to send Heatmap: {heatmap_path} (Size: {heatmap_size_mb:.2f} MB)")
                        
                        # First try to send as photo directly
                        with open(heatmap_path, 'rb') as img_file:
                            await context.bot.send_photo(
                                chat_id=chat_id,
                                photo=InputFile(img_file),
                                caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω",
                                parse_mode="HTML"
                            )
                        logger.info("Heatmap sent successfully as photo")
                        results_sent = True
                    except Exception as e:
                        logger.error(f"Failed to send heatmap as photo: {e}")
                        
                        try:
                            # Try sending as document instead
                            logger.info("Trying to send heatmap as document instead...")
                            with open(heatmap_path, 'rb') as img_file:
                                img_bytes = img_file.read()
                                file_name = os.path.basename(heatmap_path)
                                
                                await context.bot.send_document(
                                    chat_id=chat_id, 
                                    document=InputFile(io.BytesIO(img_bytes), filename=file_name),
                                    caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω",
                                    parse_mode="HTML"
                                )
                            logger.info("Heatmap sent successfully as document")
                            results_sent = True
                        except Exception as e2:
                            logger.error(f"Failed to send heatmap as document: {e2}")
                            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
                else:
                    logger.warning(f"Heatmap file path found in stdout, but file does not exist at: {heatmap_path}")
            else:
                logger.info("No Heatmap path found in stdout.")

            # --- Sending Interpretation JSON file --- 
            if interp_path:
                logger.info(f"Checking existence of Interpretation JSON: {interp_path}")
                if os.path.exists(interp_path):
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        logger.info(f"Attempting to read and format Interpretation: {interp_path}")
                        with open(interp_path, 'r', encoding='utf-8') as f:
                            interp_data = json.load(f)
                        
                        interp_formatted_sent = await send_formatted_interpretation(chat_id, interp_data)
                        
                        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JSON-—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        logger.info(f"Attempting to send Interpretation JSON file: {interp_path}")
                        with open(interp_path, 'rb') as json_file:
                            json_bytes = json_file.read() 
                            mime_type = "application/json"
                            file_name = os.path.basename(interp_path)
                            
                            await context.bot.send_document(
                                chat_id=chat_id, 
                                document=InputFile(io.BytesIO(json_bytes), filename=file_name),
                                caption="–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)",
                                parse_mode="HTML"
                            )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {interp_path}")
                        results_sent = True
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é {interp_path}: {e}")
                        try:
                            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.")
                        except Exception as reply_e:
                            logger.error(f"Failed to send error reply for Interpretation: {reply_e}")
                else:
                    logger.warning(f"Interpretation JSON path found in stdout, but file does not exist at: {interp_path}")
            else:
                logger.info("No Interpretation JSON path found in stdout.")

            # --- Sending Recommendations JSON file --- 
            if rec_path:
                logger.info(f"Checking existence of Recommendations JSON: {rec_path}")
                if os.path.exists(rec_path):
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        logger.info(f"Attempting to read and format Recommendations: {rec_path}")
                        with open(rec_path, 'r', encoding='utf-8') as f:
                            rec_data = json.load(f)
                        
                        rec_formatted_sent = await send_formatted_recommendations(chat_id, rec_data)
                        
                        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JSON-—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        logger.info(f"Attempting to send Recommendations JSON file: {rec_path}")
                        with open(rec_path, 'rb') as json_file:
                            json_bytes = json_file.read()
                            mime_type = "application/json"
                            file_name = os.path.basename(rec_path)
                            
                            await context.bot.send_document(
                                chat_id=chat_id, 
                                document=InputFile(io.BytesIO(json_bytes), filename=file_name),
                                caption="–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)",
                                parse_mode="HTML"
                            )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {rec_path}")
                        results_sent = True
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {rec_path}: {e}")
                        try:
                            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
                        except Exception as reply_e:
                            logger.error(f"Failed to send error reply for Recommendations JSON: {reply_e}")
                else:
                    logger.warning(f"Recommendations JSON path found in stdout, but file does not exist at: {rec_path}")
            else:
                logger.info("No Recommendations JSON path found in stdout.")

            # --- PDF or Fallback Sending TeX file --- 
            if pdf_path and os.path.exists(pdf_path):
                logger.info(f"Checking existence of PDF: {pdf_path}")
                pdf_size_mb = os.path.getsize(pdf_path) / (1024 * 1024)
                logger.info(f"PDF file size: {pdf_size_mb:.2f} MB")
                try:
                    logger.info(f"Attempting to send PDF file: {pdf_path}")
                    
                    with open(pdf_path, 'rb') as pdf_file:
                        pdf_bytes = pdf_file.read()  # Read file into memory
                        
                        # Explicitly specify the MIME type
                        mime_type = "application/pdf"
                        file_name = os.path.basename(pdf_path)
                        
                        await context.bot.send_document(
                            chat_id=chat_id, 
                            document=InputFile(io.BytesIO(pdf_bytes), filename=file_name),
                            caption="–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ (PDF)",
                            parse_mode="HTML"
                        )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω PDF –æ—Ç—á–µ—Ç: {pdf_path}")
                    results_sent = True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF {pdf_path}: {e}")
                    try:
                        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç.")
                    except Exception as reply_e:
                        logger.error(f"Failed to send error reply for PDF: {reply_e}")
            elif tex_path and os.path.exists(tex_path): # Only if PDF path wasn't found or file doesn't exist
                logger.info("PDF path missing or file not found, attempting fallback to TeX file.")
                logger.info(f"Checking existence of Fallback TeX: {tex_path}")
                try:
                    logger.info(f"Attempting to send Fallback TeX file: {tex_path}")
                    
                    with open(tex_path, 'rb') as tex_file:
                        tex_bytes = tex_file.read()  # Read file into memory
                        
                        # Explicitly specify the MIME type
                        mime_type = "application/x-tex"
                        file_name = os.path.basename(tex_path)
                        
                        await context.bot.send_document(
                            chat_id=chat_id, 
                            document=InputFile(io.BytesIO(tex_bytes), filename=file_name),
                            caption="–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ (TeX —Ñ–∞–π–ª)",
                            parse_mode="HTML"
                        )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω LaTeX –æ—Ç—á–µ—Ç (.tex): {tex_path}")
                    results_sent = True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å LaTeX –æ—Ç—á–µ—Ç {tex_path}: {e}")
                    try:
                        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å LaTeX –æ—Ç—á–µ—Ç (.tex).")
                    except Exception as reply_e:
                        logger.error(f"Failed to send error reply for Fallback TeX: {reply_e}")
            else:
                logger.warning(f"Neither PDF nor TeX files found or could be sent")

            if not results_sent:
                # If after all attempts nothing was sent, inform the user
                logger.warning("No results were successfully sent to the user.")
                await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.")

            # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            if output_dir and os.path.exists(output_dir) and output_dir.startswith("analysis_outputs/"):
                try:
                    # Use absolute path for safety? Though relative should work if bot CWD is /app
                    # output_dir_abs = os.path.join(SCRIPT_DIR, output_dir) # If needed
                    shutil.rmtree(output_dir)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {output_dir}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {output_dir}: {e}")
            elif output_dir:
                logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞: {output_dir}")

            # --- ENHANCED DEBUGGING FOR COORDINATES, HEATMAP, AND PDF ISSUES ---
            # Extra debug logging for coordinates file
            gemini_coords_parsed = None
            for line in stdout_str.splitlines():
                if "–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π Gemini –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:" in line:
                    gemini_coords_parsed = line.split("–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π Gemini –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:", 1)[1].strip()
                    logger.info(f"FOUND COORDINATES FILE PATH: {gemini_coords_parsed}")
                    if os.path.exists(gemini_coords_parsed):
                        try:
                            with open(gemini_coords_parsed, 'r', encoding='utf-8') as f:
                                coords_data = json.load(f)
                                coords_count = len(coords_data.get("element_coordinates", []))
                                logger.info(f"COORDINATES FILE EXISTS with {coords_count} elements")
                        except Exception as e:
                            logger.error(f"ERROR READING COORDINATES FILE: {e}")
                    else:
                        logger.error(f"COORDINATES FILE NOT FOUND AT: {gemini_coords_parsed}")
            
            # Extra debug logging for heatmap file
            heatmap_path = None
            for line in stdout_str.splitlines():
                if "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:" in line:
                    heatmap_path = line.split("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:", 1)[1].strip()
                    logger.info(f"FOUND HEATMAP FILE PATH: {heatmap_path}")
                    if os.path.exists(heatmap_path):
                        heatmap_size_mb = os.path.getsize(heatmap_path) / (1024 * 1024)
                        logger.info(f"HEATMAP FILE EXISTS with size: {heatmap_size_mb:.2f} MB")
                    else:
                        logger.error(f"HEATMAP FILE NOT FOUND AT: {heatmap_path}")
            
            # Extra debug logging for PDF generation
            pdf_path = None
            tex_path = None
            for line in stdout_str.splitlines():
                if ".pdf" in line and "‚úÖ PDF –û—Ç—á–µ—Ç:" in line:
                    pdf_path = line.split("‚úÖ PDF –û—Ç—á–µ—Ç:", 1)[1].strip()
                    logger.info(f"FOUND PDF FILE PATH: {pdf_path}")
                    if os.path.exists(pdf_path):
                        pdf_size_mb = os.path.getsize(pdf_path) / (1024 * 1024)
                        logger.info(f"PDF FILE EXISTS with size: {pdf_size_mb:.2f} MB")
                    else:
                        logger.error(f"PDF FILE NOT FOUND AT: {pdf_path}")
                        
                        # Check if tex file exists
                        tex_path = pdf_path.replace(".pdf", ".tex")
                        if os.path.exists(tex_path):
                            logger.info(f"TEX FILE EXISTS at: {tex_path}")
                            # Check log file for errors
                            log_path = tex_path.replace(".tex", ".log")
                            if os.path.exists(log_path):
                                try:
                                    with open(log_path, 'r', encoding='utf-8', errors='ignore') as f:
                                        log_tail = f.readlines()[-20:]  # Get last 20 lines
                                        logger.error(f"PDF GENERATION LOG (last 20 lines): {''.join(log_tail)}")
                                except Exception as e:
                                    logger.error(f"Error reading log file: {e}")
                        else:
                            logger.error(f"TEX FILE NOT FOUND AT: {tex_path}")
            
            # ... rest of the existing code ...

        except Exception as e:
            logger.error(f"Error in image handling: {e}")
            traceback.print_exc()
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"Update {update} caused error {context.error}", exc_info=context.error)
    # No need to check for Markdown error here anymore, as we send plain text

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    # Updated handler to accept photos OR image documents
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main() 
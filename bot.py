# redeploy trigger: fix detection - roll back to stable version
import os
import logging
import subprocess
import tempfile
import re
import shutil
import asyncio
import sys
import mimetypes
import magic  # New import for detecting MIME types
import telegram
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, 
    ConversationHandler, CallbackQueryHandler
)
from dotenv import load_dotenv
import json
import glob
from pathlib import Path
import traceback
from datetime import datetime
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞)
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx
logger = logging.getLogger(__name__)

# --- Define script path relative to bot.py ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
PIPELINE_SCRIPT_PATH = os.path.join(SCRIPT_DIR, 'run_analysis_pipeline.py')

# Initialize MIME types
mimetypes.init()

# Define conversation states
GET_TYPE, WAIT_TYPE, GET_SCENARIO, WAIT_SCENARIO = range(4)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞), –∏ —è –ø—Ä–æ–≤–µ–¥—É –µ–≥–æ –∞–Ω–∞–ª–∏–∑.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await update.message.reply_text(
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç) –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª).\n"
        "2. –Ø –∑–∞–ø—É—â—É –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ (GPT-4, Gemini Coordinates, Heatmap, Report).\n"
        "3. –í –æ—Ç–≤–µ—Ç —è –ø—Ä–∏—à–ª—é PDF-–æ—Ç—á–µ—Ç –∏ —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π / –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ---

async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    message = update.message
    chat_id = update.effective_chat.id
    file_to_get = None
    file_unique_id = None
    file_extension = '.png' # Default extension

    photo = message.photo
    document = message.document

    if photo:
        # Process photo
        await message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. üëç –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–º –ø–∞—Ä—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        try:
            file_to_get = await message.photo[-1].get_file()
            file_unique_id = file_to_get.file_unique_id
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    elif document and document.mime_type and document.mime_type.startswith('image/'):
        # Process document image
        await message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. üëç –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–º –ø–∞—Ä—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        try:
            file_to_get = await document.get_file()
            file_unique_id = file_to_get.file_unique_id
            file_extension = mimetypes.guess_extension(document.mime_type) or '.png'
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    else:
        # Should not happen if handler filters are correct, but as a safeguard
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    user_images_dir = os.path.join(SCRIPT_DIR, "user_images")
    os.makedirs(user_images_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ user_images/
    image_filename = f"input_image_{file_unique_id}{file_extension}"
    image_path = os.path.join(user_images_dir, image_filename)
    try:
        await file_to_get.download_to_drive(image_path)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {image_path}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ user_data
    context.user_data['image_path'] = image_path
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω image_path –≤ user_data: {context.user_data['image_path']}")
    context.user_data['interface_type'] = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    context.user_data['user_scenario'] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    keyboard = [
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Ç–∏–ø", callback_data='specify_type')],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_type')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text(
        "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞', '—Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–µ–µ.",
        reply_markup=reply_markup
    )

    return GET_TYPE

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ ---

async def ask_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data='specify_scenario')],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_scenario')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è')\n–≠—Ç–æ —Ç–∞–∫–∂–µ –ø–æ–º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑—É.",
        reply_markup=reply_markup
    )
    return GET_SCENARIO

async def ask_type_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–∫–∞–∑–∞—Ç—å —Ç–∏–ø'. –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    return WAIT_TYPE

async def received_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    user_type = update.message.text
    context.user_data['interface_type'] = user_type
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {user_type}")
    await update.message.reply_text(f"–¢–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ '{user_type}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data='specify_scenario')],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_scenario')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è')\n–≠—Ç–æ —Ç–∞–∫–∂–µ –ø–æ–º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑—É.",
        reply_markup=reply_markup
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    return GET_SCENARIO

async def skip_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    context.user_data['interface_type'] = None # –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–ù–µ —É–∫–∞–∑–∞–Ω"
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ —Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É —Å—Ü–µ–Ω–∞—Ä–∏—è
    # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º query.message –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ update –≤ ask_scenario, —Ç.–∫. update –∑–¥–µ—Å—å - —ç—Ç–æ CallbackQuery
    # –ï—Å–ª–∏ update.message –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º query.message
    responder_message = getattr(update, 'message', query.message)
    return await ask_scenario(responder_message, context)

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    logger.info("--- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —ç—Ç–∞–ø –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ---")
    responder = update.message if hasattr(update, 'message') else update.callback_query.message
    chat_id = responder.chat_id

    image_path = context.user_data.get('image_path')
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º '–ù–µ —É–∫–∞–∑–∞–Ω' –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    interface_type = context.user_data.get('interface_type') or '–ù–µ —É–∫–∞–∑–∞–Ω'
    user_scenario = context.user_data.get('user_scenario') or '–ù–µ —É–∫–∞–∑–∞–Ω'

    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: image_path={image_path}, interface_type='{interface_type}', user_scenario='{user_scenario}'")

    if not image_path or not os.path.exists(image_path):
        logger.error("–û—à–∏–±–∫–∞: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await responder.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    # --- –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ ---
    message_text = "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
    if interface_type != '–ù–µ —É–∫–∞–∑–∞–Ω':
        message_text += f"\n–¢–∏–ø: {interface_type}"
    if user_scenario != '–ù–µ —É–∫–∞–∑–∞–Ω':
        message_text += f"\n–°—Ü–µ–Ω–∞—Ä–∏–π: {user_scenario}"
    message_text += "\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... ‚è≥"
    await responder.reply_text(message_text)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
        if not os.path.exists(PIPELINE_SCRIPT_PATH):
            logger.error(f"–°–∫—Ä–∏–ø—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PIPELINE_SCRIPT_PATH}")
            await responder.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            context.user_data.clear()
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        command = [
            sys.executable,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ python, —á—Ç–æ –∏ –¥–ª—è –±–æ—Ç–∞
            PIPELINE_SCRIPT_PATH,
            '--image-path', image_path,
            '--interface-type', interface_type,
            '--user-scenario', user_scenario
        ]
        logger.info(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate() # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        stdout_decoded = stdout.decode().strip() if stdout else ""
        stderr_decoded = stderr.decode().strip() if stderr else ""


        if process.returncode == 0:
            logger.info(f"–ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {image_path}.")
            if stdout_decoded: logger.info(f"Pipeline stdout:\n{stdout_decoded}")
            if stderr_decoded: logger.warning(f"Pipeline stderr:\n{stderr_decoded}") # –õ–æ–≥–∏—Ä—É–µ–º stderr –¥–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

            # --- –ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
            image_path_obj = Path(image_path)
            base_filename = image_path_obj.stem # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            results_dir = image_path_obj.parent # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

            # –ò—â–µ–º PDF, PNG –∏ JSON —Ñ–∞–π–ª—ã —Å —Ç–µ–º –∂–µ –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–µ–º + —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
            pdf_report_pattern = f"{base_filename}_report.pdf"
            heatmap_pattern = f"{base_filename}_heatmap.png"
            interpretation_pattern = f"{base_filename}_interpretation.json"
            recommendations_pattern = f"{base_filename}_recommendations.json"

            pdf_files = list(results_dir.glob(pdf_report_pattern))
            heatmap_files = list(results_dir.glob(heatmap_pattern))
            interpretation_files = list(results_dir.glob(interpretation_pattern))
            recommendations_files = list(results_dir.glob(recommendations_pattern))

            logger.info(f"–ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: PDF='{pdf_report_pattern}', Heatmap='{heatmap_pattern}', Interpretation='{interpretation_pattern}', Recommendations='{recommendations_pattern}' –≤ '{results_dir}'")

            sent_files_count = 0 # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            sent_files = False
            if pdf_files:
                pdf_path = str(pdf_files[0])
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ PDF –æ—Ç—á–µ—Ç–∞: {pdf_path}")
                    with open(pdf_path, 'rb') as pdf_file:
                         await context.bot.send_document(chat_id=chat_id, document=pdf_file, connect_timeout=60, read_timeout=60)
                    sent_files = True
                    sent_files_count += 1
                except telegram.error.NetworkError as ne:
                     logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –æ—Ç—á–µ—Ç–∞: {ne}. –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞.")
                     try:
                         with open(pdf_path, 'rb') as pdf_file:
                             await context.bot.send_document(chat_id=chat_id, document=pdf_file, connect_timeout=120, read_timeout=120)
                         sent_files = True
                         sent_files_count += 1
                     except Exception as e_retry:
                         logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e_retry}")
                         await responder.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é.")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
                    await responder.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç.")
            else:
                logger.warning(f"PDF –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {base_filename} –≤ {results_dir}")
                # Debug: list files in dir
                try:
                    files_in_dir = os.listdir(results_dir)
                    logger.debug(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {results_dir}: {files_in_dir}")
                except Exception as list_e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {results_dir}: {list_e}")


            if heatmap_files:
                heatmap_path = str(heatmap_files[0])
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞): {heatmap_path}")
                    with open(heatmap_path, 'rb') as hm_file:
                        await context.bot.send_document(chat_id=chat_id, document=hm_file, connect_timeout=60, read_timeout=60)
                    sent_files = True
                    sent_files_count += 1
                except telegram.error.NetworkError as ne:
                     logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {ne}. –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞.")
                     try:
                         with open(heatmap_path, 'rb') as hm_file:
                             await context.bot.send_document(chat_id=chat_id, document=hm_file, connect_timeout=120, read_timeout=120)
                         sent_files = True
                         sent_files_count += 1
                     except Exception as e_retry:
                         logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e_retry}")
                         await responder.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é.")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}", exc_info=True)
                    await responder.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É.")
            else:
                logger.warning(f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {base_filename} –≤ {results_dir}")
                 # Debug: list files in dir (if not already done for PDF)
                if not pdf_files: # Avoid listing twice if both are missing
                    try:
                        files_in_dir = os.listdir(results_dir)
                        logger.debug(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {results_dir}: {files_in_dir}")
                    except Exception as list_e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {results_dir}: {list_e}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ JSON –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            if interpretation_files:
                interpretation_path = str(interpretation_files[0])
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {interpretation_path}")
                    with open(interpretation_path, 'rb') as interp_file:
                         await context.bot.send_document(chat_id=chat_id, document=interp_file, caption="JSON —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –∞–Ω–∞–ª–∏–∑–∞", connect_timeout=60, read_timeout=60)
                    sent_files_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}", exc_info=True)
                    await responder.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª JSON —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π.")
            else:
                logger.warning(f"JSON –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {base_filename} –≤ {results_dir}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ JSON —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if recommendations_files:
                recommendations_path = str(recommendations_files[0])
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ JSON —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {recommendations_path}")
                    with open(recommendations_path, 'rb') as rec_file:
                         await context.bot.send_document(chat_id=chat_id, document=rec_file, caption="JSON —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏", connect_timeout=60, read_timeout=60)
                    sent_files_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}", exc_info=True)
                    await responder.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª JSON —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.")
            else:
                logger.warning(f"JSON —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {base_filename} –≤ {results_dir}")


            # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤
            if sent_files_count == 0:
                 await responder.reply_text("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (PDF, —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞, JSON). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            elif sent_files_count < 4: # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ 4 —Ñ–∞–π–ª–∞ (PDF, PNG, 2xJSON)
                 await responder.reply_text("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –∏ –ª–æ–≥–∏.")

        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è {image_path}. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {process.returncode}")
            logger.error(f"Pipeline stdout:\n{stdout_decoded}")
            logger.error(f"Pipeline stderr:\n{stderr_decoded}")
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üò•"
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–∑ stderr, –µ—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
            if stderr_decoded and len(stderr_decoded) < 500 : # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
               error_message += f"\n–î–µ—Ç–∞–ª–∏: {stderr_decoded}"
            await responder.reply_text(error_message)

    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/–æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}", exc_info=True)
        await responder.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.")

    finally:
        # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏
        logger.info("–û—á–∏—Å—Ç–∫–∞ user_data.")
        context.user_data.clear()
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if image_path and os.path.exists(image_path):
            try:
                os.remove(image_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            except Exception as del_e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path}: {del_e}")


    return ConversationHandler.END

async def ask_scenario_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–∫–∞–∑–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π'. –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    return WAIT_SCENARIO

async def received_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑."""
    user_scenario_text = update.message.text
    context.user_data['user_scenario'] = user_scenario_text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {user_scenario_text}")
    await update.message.reply_text(f"–°—Ü–µ–Ω–∞—Ä–∏–π '{user_scenario_text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    return await start_analysis(update, context)

async def skip_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑."""
    query = update.callback_query
    await query.answer()
    context.user_data['user_scenario'] = None # –ò–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω"
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º query –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ update –≤ start_analysis
    return await start_analysis(query, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    responder = update.message if hasattr(update, 'message') else update.callback_query.message
    await responder.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
    # –û—á–∏—â–∞–µ–º user_data –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    image_path = context.user_data.get('image_path')
    context.user_data.clear()
    if image_path and os.path.exists(image_path):
        try:
            os.remove(image_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {image_path}")
        except Exception as del_e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ {image_path}: {del_e}")

    return ConversationHandler.END

# --- –°—Ç–∞—Ä—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã) ---
# Helper function to detect MIME type
# ... (get_mime_type)
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# ... (send_formatted_interpretation)
# ... (send_formatted_recommendations)

# --- –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ start_analysis) ---
# try:
#    # Check if pipeline script exists
#    # ... (pipeline execution code) ...
# except Exception as e:
#    # ... (error handling) ...

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"Update {update} caused error {context.error}", exc_info=context.error)
    # No need to check for Markdown error here anymore, as we send plain text

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.PHOTO | filters.Document.IMAGE, start_conversation)],
        states={
            GET_TYPE: [
                CallbackQueryHandler(ask_type_input, pattern='^specify_type$'),
                CallbackQueryHandler(skip_type, pattern='^skip_type$'),
            ],
            WAIT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_type)],
            GET_SCENARIO: [
                CallbackQueryHandler(ask_scenario_input, pattern='^specify_scenario$'),
                CallbackQueryHandler(skip_scenario, pattern='^skip_scenario$'),
            ],
            WAIT_SCENARIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_scenario)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        # conversation_timeout=600 # 10 –º–∏–Ω—É—Ç
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler) # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç.–∫. –æ–Ω —Ç–µ–ø–µ—Ä—å entry_point –¥–ª—è conv_handler
    # application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main() 